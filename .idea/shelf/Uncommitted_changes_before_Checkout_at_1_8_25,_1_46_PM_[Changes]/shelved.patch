Index: app/src/main/java/com/app/java/trackingrunningapp/ui/run/RunFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.java.trackingrunningapp.ui.run\n\nimport android.Manifest\nimport android.annotation.SuppressLint\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.core.content.ContextCompat\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.repeatOnLifecycle\nimport androidx.navigation.findNavController\nimport com.app.java.trackingrunningapp.R\nimport com.app.java.trackingrunningapp.data.database.InitDatabase\nimport com.app.java.trackingrunningapp.databinding.FragmentRunBinding\nimport com.app.java.trackingrunningapp.model.repositories.NotificationRepository\nimport com.app.java.trackingrunningapp.ui.viewmodel.GPSPointViewModel\nimport com.app.java.trackingrunningapp.ui.viewmodel.GPSPointViewModelFactory\nimport com.app.java.trackingrunningapp.ui.viewmodel.GPSTrackViewModel\nimport com.app.java.trackingrunningapp.ui.viewmodel.GPSTrackViewModelFactory\nimport com.app.java.trackingrunningapp.ui.viewmodel.RunSessionViewModel\nimport com.app.java.trackingrunningapp.ui.viewmodel.RunSessionViewModelFactory\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.mapbox.geojson.Point\nimport com.mapbox.maps.CameraOptions\nimport com.mapbox.maps.MapView\nimport com.mapbox.maps.Style\nimport com.mapbox.maps.plugin.annotation.AnnotationPlugin\nimport com.mapbox.maps.plugin.annotation.annotations\nimport com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager\nimport com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions\nimport com.mapbox.maps.plugin.annotation.generated.createPolylineAnnotationManager\nimport com.mapbox.maps.plugin.locationcomponent.OnIndicatorPositionChangedListener\nimport com.mapbox.maps.plugin.locationcomponent.location\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\n\nclass RunFragment : Fragment() {\n    private lateinit var binding: FragmentRunBinding\n    private var isTracking: Boolean = false\n    private lateinit var mapView: MapView\n    private val routeCoordinates = mutableListOf<Point>()\n    private lateinit var annotationApi: AnnotationPlugin\n    private lateinit var polylineAnnotationManager: PolylineAnnotationManager\n    private lateinit var runSessionViewModel: RunSessionViewModel\n    private lateinit var gpsTrackViewModel: GPSTrackViewModel\n    private lateinit var gpsPointViewModel: GPSPointViewModel\n\n    private var mutex = Mutex()\n\n    private var indicatorListener: OnIndicatorPositionChangedListener? = null\n    private val requestPermissionsLauncher =\n        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->\n            val allGranted = permissions.all {\n                it.value\n            }\n            if (allGranted) {\n                initMapAndLocation()\n            } else {\n                Toast.makeText(\n                    requireContext(),\n                    \"Permissions are required to proceed.\",\n                    Toast.LENGTH_SHORT\n                ).show()\n            }\n        }\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        val runFactory = RunSessionViewModelFactory(InitDatabase.runSessionRepository)\n        runSessionViewModel =\n            ViewModelProvider(this, runFactory).get(RunSessionViewModel::class.java)\n\n        val gpsTrackFactory = GPSTrackViewModelFactory(InitDatabase.gpsTrackRepository)\n        gpsTrackViewModel =\n            ViewModelProvider(this, gpsTrackFactory).get(GPSTrackViewModel::class.java)\n\n        val gpsPointFactory = GPSPointViewModelFactory(InitDatabase.gpsPointRepository)\n        gpsPointViewModel =\n            ViewModelProvider(this, gpsPointFactory).get(GPSPointViewModel::class.java)\n\n        binding = FragmentRunBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        setupPermission()\n        setupActionRun()\n        initArrowAction()\n    }\n\n    private fun setupActionRun() {\n        binding.btnStartTracking.setOnClickListener {\n            binding.btnStartTracking.visibility = View.INVISIBLE\n            binding.btnPause.visibility = View.VISIBLE\n            binding.btnStop.visibility = View.VISIBLE\n            requireActivity().findViewById<BottomNavigationView>(R.id.bottom_nav).isVisible = false\n\n            // TODO: START\n            lifecycleScope.launch {\n                mutex.withLock {\n                    runSessionViewModel.initiateRunSession()\n                    gpsTrackViewModel.initiateGPSTrack()\n                    runSessionViewModel.setRunSessionStartTime()\n                        // TODO: insert start tracking and sending gps function\n                        startTracking()\n                        runSessionViewModel.fetchAndUpdateStats()\n\n                    }\n                }\n            }\n\n            binding.btnPause.setOnClickListener {\n                binding.btnPause.visibility = View.INVISIBLE\n                binding.btnResume.visibility = View.VISIBLE\n                // TODO: PAUSE\n                lifecycleScope.launch {\n                    mutex.withLock {\n                        // TODO: do something when pause\n                        runSessionViewModel.fetchAndUpdateStats()\n                        runSessionViewModel.pauseRunSession()\n                        pauseTracking()\n                        gpsTrackViewModel.stopGPSTrack()\n                    }\n                }\n            }\n\n            binding.btnResume.setOnClickListener {\n                binding.btnResume.visibility = View.INVISIBLE\n                binding.btnPause.visibility = View.VISIBLE\n                // TODO: RESUME\n                lifecycleScope.launch {\n                    mutex.withLock {\n                        // TODO: do something when resume\n                        runSessionViewModel.setRunSessionStartTime()\n                        runSessionViewModel.fetchAndUpdateStats()\n                        resumeTracking()\n                        gpsTrackViewModel.resumeGPSTrack()\n                    }\n                }\n            }\n\n            binding.btnStop.setOnClickListener {\n                it.findNavController().navigate(R.id.action_runFragment_to_runResultFragment)\n                // TODO: STOP\n                lifecycleScope.launch {\n                    mutex.withLock {\n                        // TODO: stop gps tracking\n                        runSessionViewModel.fetchAndUpdateStats()\n                        gpsTrackViewModel.stopGPSTrack()\n                        stopTracking()\n                        runSessionViewModel.finishRunSession()\n                    }\n                }\n            }\n        }\n\n        @SuppressLint(\"InlinedApi\")\n        private fun setupPermission() {\n            val permissions = arrayOf(\n                Manifest.permission.ACCESS_FINE_LOCATION,\n                Manifest.permission.ACCESS_COARSE_LOCATION,\n                Manifest.permission.POST_NOTIFICATIONS\n            )\n            // Check if all permissions are granted\n            if (permissions.all {// false if 1 permission is denied\n                    ContextCompat\n                        .checkSelfPermission(\n                            requireContext(),\n                            it\n                        ) == PackageManager.PERMISSION_GRANTED\n                }) {\n                initMapAndLocation()\n            } else {\n                // Request missing permissions\n                requestPermissionsLauncher.launch(permissions)\n            }\n        }\n\n        private fun initArrowAction() {\n            binding.icArrowUp.setOnClickListener {\n                binding.containerArrowDown.visibility = View.VISIBLE\n                binding.containerArrowUp.visibility = View.GONE\n                binding.containerMetric.visibility = View.GONE\n            }\n            binding.icArrowDown.setOnClickListener {\n                binding.containerArrowUp.visibility = View.VISIBLE\n                binding.containerArrowDown.visibility = View.GONE\n                binding.containerMetric.visibility = View.VISIBLE\n            }\n            val runDuration = binding.layoutMetric.textRunDurationMetric\n            val runDistance = binding.layoutMetric.textRunDistanceMetric\n            val runPace = binding.layoutMetric.textRunPaceMetric\n            val runCalo = binding.layoutMetric.textRunCaloMetric\n\n            runSessionViewModel.statsFlow.observe(viewLifecycleOwner) {\n                runDuration.text = getString(R.string.text_duration_metric,it?.duration)\n                Log.d(\"run_time\", \"${it?.duration}\")\n                runDistance.text = getString(R.string.text_distance_metric,it?.distance)\n                runPace.text = getString(R.string.text_pace_metric,it?.pace)\n                runCalo.text = getString(R.string.text_calorie_metric,it?.caloriesBurned)\n            }\n        }\n\n        private fun initMapAndLocation() {\n            // Setup route drawing\n            mapView = binding.mapView\n            annotationApi = mapView.annotations\n            polylineAnnotationManager = annotationApi.createPolylineAnnotationManager()\n            // Setup map\n            mapView.mapboxMap.loadStyle(Style.STANDARD) {\n                // Init location\n                val locationComponentPlugin = mapView.location\n                locationComponentPlugin.updateSettings {\n                    this.enabled = true\n                }\n\n                // Listen for the first location update to zoom in but don't track yet\n                locationComponentPlugin.addOnIndicatorPositionChangedListener(object :\n                    OnIndicatorPositionChangedListener {\n                    override fun onIndicatorPositionChanged(point: Point) {\n                        // Zoom to the initial position\n                        mapView.mapboxMap.setCamera(\n                            CameraOptions.Builder()\n                                .center(point) // Set initial camera position\n                                .zoom(15.0) // Zoom level\n                                .build()\n                        )\n\n                        // Remove the listener after the initial zoom\n                        locationComponentPlugin.removeOnIndicatorPositionChangedListener(this)\n                    }\n                })\n            }\n        }\n\n        private fun startTracking() {\n            lifecycleScope.launch {\n                if (!isTracking) {\n                    isTracking = true\n                    // Clear previous route coordinates if restarting\n                    routeCoordinates.clear()\n\n                    // Set up the location listener for tracking\n                    val locationComponentPlugin = mapView.location\n                    locationComponentPlugin.updateSettings {\n                        this.enabled = true // Enable location updates\n                    }\n                    indicatorListener = OnIndicatorPositionChangedListener { point ->\n                        // TODO: Implement pause mechanism\n                        routeCoordinates.add(point)\n\n                        // TODO: Save <<point>> to database\n                        Log.d(\"Longitude\", point.longitude().toString())\n                        Log.d(\"Latitude\", point.latitude().toString())\n                        // Draw the route\n                        lifecycleScope.launch {\n                            gpsPointViewModel.insertGPSPoint(point.longitude(), point.latitude())\n                        }\n                        drawRoute()\n                    }\n                    // Add the listener to start tracking\n                    indicatorListener?.let {\n                        locationComponentPlugin.addOnIndicatorPositionChangedListener(\n                            it\n                        )\n                    }\n                }\n            }\n        }\n\n        private fun resumeTracking() {\n            if (!isTracking) {\n                isTracking = true\n\n                // Set up the location listener for tracking\n                val locationComponentPlugin = mapView.location\n                locationComponentPlugin.updateSettings {\n                    this.enabled = true // Enable location updates\n                }\n                indicatorListener = OnIndicatorPositionChangedListener { point ->\n                    // TODO: Implement pause mechanism\n                    routeCoordinates.add(point)\n\n                    // TODO: Save <<point>> to database\n                    Log.d(\"Longitude\", point.longitude().toString())\n                    Log.d(\"Latitude\", point.latitude().toString())\n                    // Draw the route\n                    lifecycleScope.launch {\n                        gpsPointViewModel.insertGPSPoint(point.longitude(), point.latitude())\n                    }\n                    drawRoute()\n                }\n                // Add the listener to start tracking\n                indicatorListener?.let {\n                    locationComponentPlugin.addOnIndicatorPositionChangedListener(\n                        it\n                    )\n                }\n            }\n        }\n\n        private fun stopTracking() {\n            if (isTracking) {\n                isTracking = false\n\n                // Remove the location listener\n                val locationComponentPlugin = mapView.location\n\n                indicatorListener?.let {\n                    locationComponentPlugin.removeOnIndicatorPositionChangedListener(it)\n                }\n                indicatorListener = null // Clear the reference\n\n                // Clear the route from the map\n                polylineAnnotationManager.deleteAll()\n\n                // Clear the routeCoordinates list\n                routeCoordinates.clear()\n            }\n        }\n\n        private fun pauseTracking() {\n            if (isTracking) {\n                isTracking = false\n\n                // Remove the location listener\n                val locationComponentPlugin = mapView.location\n\n                indicatorListener?.let {\n                    locationComponentPlugin.removeOnIndicatorPositionChangedListener(it)\n                }\n                indicatorListener = null // Clear the reference\n\n                // Clear the routeCoordinates list\n                routeCoordinates.clear()\n            }\n        }\n\n        private fun drawRoute() {\n            polylineAnnotationManager.deleteAll()\n            val polylineAnnotationOptions: PolylineAnnotationOptions = PolylineAnnotationOptions()\n                .withPoints(routeCoordinates)\n                .withLineColor(\"#FF0000\")\n                .withLineWidth(5.0)\n            polylineAnnotationManager.create(polylineAnnotationOptions)\n        }\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/java/trackingrunningapp/ui/run/RunFragment.kt b/app/src/main/java/com/app/java/trackingrunningapp/ui/run/RunFragment.kt
--- a/app/src/main/java/com/app/java/trackingrunningapp/ui/run/RunFragment.kt	
+++ b/app/src/main/java/com/app/java/trackingrunningapp/ui/run/RunFragment.kt	
@@ -117,8 +117,8 @@
                     gpsTrackViewModel.initiateGPSTrack()
                     runSessionViewModel.setRunSessionStartTime()
                         // TODO: insert start tracking and sending gps function
-                        startTracking()
-                        runSessionViewModel.fetchAndUpdateStats()
+                    startTracking()
+                    runSessionViewModel.fetchAndUpdateStats()
 
                     }
                 }
